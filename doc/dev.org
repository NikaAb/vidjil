#+TITLE: Vidjil -- Developer Documentation
#+AUTHOR: The Vidjil team (Mathieu, Mikaël, Aurélien, Florian, Marc, Ryan and Tatiana)
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org-mode.css" />

# This manual can be browsed online:
#     http://www.vidjil.org/doc/dev.html               (last stable release)
#     http://git.vidjil.org/blob/master/doc/dev.org    (development version)

# Vidjil -- High-throughput Analysis of V(D)J Immune Repertoire -- [[http://www.vidjil.org]]
# Copyright (C) 2011-2017 by Bonsai bioinformatics
# at CRIStAL (UMR CNRS 9189, Université Lille) and Inria Lille
# contact@vidjil.org

Here are aggregated notes forming the developer documentation on the Vidjil components, algorithm,
web application client and server.
This documentation is a work-in-progress, it is far from being as polished as the user documentation
Help can also be found in the source code and in the commit messages.


* Algorithm
** Code organisation
   The algorithm follows roughly those steps:
   1. The germlines are read. germlines are in the fasta format and are read
      by the Fasta class (=core/fasta.h=). Germlines are built using the
      Germline (or MultiGermline) class (=core/germline.h=)
   2. The input sequence file (.fasta, .fastq, .gz) is read by an OnlineFasta
      (=core/fasta.h=). The difference with the Fasta class being that all the
      data is not stored in memory but the file is read online, storing only
      the current entry.
   3. Windows must be extracted from the read, which is done by the
      WindowExtractor class (=core/windowExtractor.h=). This class has an
      =extract= method which returns a WindowsStorage object
      (=core/windows.h=) in which windows are stored.
   4. To save space consumption, all the reads linked to a given window are
      not stored. Only the longer ones are kept. The BinReadStorage class is
      used for that purpose (=core/read_storage.h=).
   5. In the WindowStorage, we now have the information on the clusters and on
      the abundance of each cluster. However we lack a sequence representative
      of the cluster. For that purpose the class provides a
      =getRepresentativeComputer= method that provides a
      KmerRepresentativeComputer (=core/representative.h=). This class can
      compute a representative sequence using the (long) reads that were
      stored for a given window.
   6. The representative can then be segmented to determine what V, D and J
      genes are at play. This is done by the FineSegmenter (=core/segment.h=).
** The xxx germline
   - All germlines are inserted in one index using =build_with_one_index()= and
     the segmentation method is set to =SEG_METHOD_MAX12= to tell that the
     segmentation must somehow differ.
   - So that the FineSegmenter correctly segments the sequence, the =rep_5= and
     =rep_3= members (class =Fasta=) of the xxx germline are modified by the
     FineSegmenter. The =override_rep5_rep3_from_labels()= method from the
     Germline is the one that overwrites those members with the Fasta
     corresponding to the affectation found by the KmerSegmenter.
* Browser

** Installation

Run a =make= into =browser/= to get the necessary files.
This will in particular get the germline files as well as the icon files.

Opening the =browser/index.html= file is then enough to get a functionning browser,
able to open =.vidjil= files with the =import/export= menu.

To work with actual data, the easiest way is to copy =js/conf.js.sample= to =js/conf.js=.
This will unlock the =patients= menu and allow your local browser
to access the public server at http://app.vidjil.org/.


** Browser API

The browser can be opened on a data file specified from a =data= attribute,
and optionally on an analysis file specified from a =analysis= attribute,
as in the following URLs on our test server:

- http://app.vidjil.org/browser/?data=test.vidjil
- http://app.vidjil.org/browser/?data=test.vidjil&analysis=test.analysis
- http://app.vidjil.org/browser/?data=http://app.vidjil.org/browser/test.vidjil

Both GET and POST requests are accepted.
Note that the =browser/index.html= file and the =.vidjil/.analysis= files should be hosted on the same server.
Otherwise, the server hosting the =.vidjil/.analysis= files must accept cross-domain queries.



** Architecture

The Vidjil browser is a set of /views/ linked to a same /model/.
The model keeps the views in sync on some global properties,
most notably dealing with the selection of clones, with the clone filtering,
as well with the locus selection.

- The model (=js/model.js=) is the main object of the Vidjil browser.
  It loads and saves =.vidjil= json data (either directly from data, or from a local file, or from some url).
  It provides function to access and edit information on the clones and on the global parameters
  It keeps all the views in sync.

- Each of the views (=Graph=, =ScatterPlot=, =List=, =Segment=) is rendered inside one or several =<div>= elements,
  and kept sync with the model. All the views are optional, and several views of the same type can be added.
  See =js/main.js= for the invocation

- The link with the patient database/server is done with the =Database= object (=js/database.js=)

- Other objects: =Report=, =Shortcut=
  Extends functionalities but requires elements from the full =index.html=.


** Integrating the browser

*** HTML and CSS
  - The =index.html= contains the =<div>= for all views and the menus
  - The CSS (=css/light.css=) is generated by =less= from =css/vidjil.less=

  - The =small_example.html= is a minimal example embedding basic HTML, CSS, as well as some data.
    As the menus are not embedded in this file, functionalities should be provided by direct calls to the models and the views.

*** Javascript
  - The wonderful library =require.js= is used, so there is only one file to include
    <script data-main="js/app.js" src="js/lib/require.js"></script>

  - =js/main.js= creates the different views and binds them to the model.
    Another option is to directly define a function named =main()=, as in =small_example.html=.

*** JSON .vidjil data

Clone lists can be passed to the model through several ways:
  - directly by the user (import/export)
  - from a patient database (needs a database)
  - trough the API (see below)
  - or by directly providing data through Javascript (as in =small_example.html=)

The first three solutions need some further elements from the full =index.html=.


** Notifications
*** Priority
#<<browser:priority>>
    The priority determines how the notification are shown and what action the
    user should do. The priorities can be between 0 and 3.
    - 0 :: The notification is not shown
    - 1 :: The notification is shown (usually on green background) and
         automatically disappears
    - 2 :: The notification is shown (usually on yellow background) and
         automatically disappears
    - 3 :: The notification is shown (usually on red background) and doesn't
         disappear until the user clicks on it.

    In the =console.log=, the field =priority= takes one of those priorities.
** Plots
*** How to add something to be plotted
    You want to add a dimension in the scatterplot or as a color? Read the
    following.
**** Scatterplot
     In [[file:../browser/js/scatterPlot.js][scatterPlot.js]], the =available_axis= object defines the dimensions that
     can be displayed. It suffices to add an entry so that it will be proposed
     in the X and Y axis. This kind of way of doing should be generalized to
     the other components.

     The presets are defined in the =preset= object.
**** Color
     Adding a color needs slightly more work than adding a dimension in the
     scatterplot.

     The function =updateColor= in file [[file:../browser/js/clone.js][clone.js]] must be modified to add our color method.
     The variable =this.color= must contain a color (either in HTML or RGB, or…).

     Then a legend must be displayed to understand what the color represents.
     For this sake, modify the =build_info_color= method in [[file:../browser/js/info.js][info.js]] file. By
     default four spans are defined (that can be used) to display the legend:
     =span0=, ..., =span3=.

     Finally modify the [[file:../browser/index.html][index.html]] file to add the new color method in the
     select box (which is under the =color_menu= ID).
** Classes
*** Clone
**** Info box
     In the info box all the fields starting with a _ are put. Also all the
     fields under the =seg= field are displayed as soon as they have a =start= and
     =stop=. Some of them can be explicitly not displayed by filling the
     =exclude_seg_info= array in =getHtmlInfo=.

* Server
** Notifications

The news system is a means of propagating messages to the users of a vidjil server installation.
Messages are propagated in near-realtime for users interacting directly with the server and at a slightly slower rate for users simply using the browser but for which the server is configured.

*** Message Retrieval
The browser by default periodically queries the server to retrieve any new messages and are displayed on a per user basis. This means that any message having already been viewed by the user is not displayed in the browser.
Older messages can be viewed from the index of news items.

*** Caching
News items are kept in cache in order to relieve the database from a potentially large amount of queries.
The cache is stored for each user and is updated only when a change occurs (message read, message created or message edited).

*** Formatting
   Messages can be formatted by using the Markdown syntax. Syntax details are
   available here: http://commonmark.org/help/

*** Priority
    The priority determines how the notification is shown (see [[browser:priority][here for more
    details]]). From the server we have two ways of modifiying the priority.
    Either by defining the =success= field to ='true'= or to ='false'=, or
    by explicitly specifying the priority in the field =priority=.

    For more details see 35054e4
** Getting data and analysis
   How the data files (.vidjil) and analysis files are retrieved from the server?
*** Retrieving the data file
    This is done in the =default.py= controller under the =get_data= function.
    However the .vidjil file is not provided as its exact copy on the
    server. Several informations coming from the DB are fed to the file
    (original filename, time stamps, information on each point, …)
*** Retrieving the analysis file
    This is done in the =default.py= controller under the =get_analysis= function.
    Actually the real work is done in the =analysis_file.py= model, in the
    =get_analysis_data= function.
** Permissions
   Permissions are handled by Web2py's authentication mechanism which is
   specialised to Vidjil's characteristics through the =VidjilAuth= class.

** Database
*** Export
    mysqldump -u <user> -p <database> -c --no-create-info > <file>
*** Import
    In order to import the data from another server, you need to ensure
    there will be no key collision, or the import will fail.
    If the database contains data, the easiest is to drop the database and
    create a new empty database.
    This will require you to delete the .table file in web2py/applications/vidjil/databases
    In order to create the tables you should then load a page from the
    webapp, but DO NOT init the database, because this will raise the problem
    of colliding primary keys again.

    Then run:
    mysql -u <user> -p <database> < file

*** VidjilAuth
   One VidjilAuth is launched for a given user when a controller is called.
   During that call, we cache as much as possible the calls to the DB.  For
   doing so the =get_permission= method is defined (overriding the native
   =has_permission=). It calls the native =has_permission= only when that call
   hasn't already been done (this is particularly useful for DB intensive
   queries, such as the compare patients).

   Also some user characteristics are preloaded (groups and whether the person
   is an admin), which also prevents may DB calls.
* Tests
** Algorithm
*** Unit
    Unit tests are managed using an internal lightweight poorly-designed
    library that outputs a TAP file. They are organised in the directory
    [[../algo/tests][algo/tests]].

    All the tests are defined in the [[../algo/tests/tests.cpp][tests.cpp]] file. But, for the sake of
    clarity, this file includes other =cpp= files that incorporate all the
    tests. A call to =make= compiles and launches the =tests.cpp= file, which
    outputs a TAP file (in case of total success) and creates a =tests.cpp.tap=
    file (in every case).
**** Tap test library
     The library is defined in the [[../algo/tests/testing.h][testing.h]] file.

     Tests must be declared in the [[../algo/tests/tests.h][tests.h]] file:
     1. Define a new macro (in the enum) corresponding to the test name
     2. In =declare_tests()= use =RECORD_TAP_TEST= to associate the macro with a
        description (that will be displayed in the TAP output file).

     Then testing can be done using the =TAP_TEST= macro. The macro takes three
     arguments. The first one is a boolean that is supposed to be true, the
     second is the test name (using the macro defined in =tests.h=) and the
     third one (which can be an empty string) is something which is displayed
     when the test fails.


** Browser
*** Code Quality
    Quality of code is checked using [[http://jshint.com/][JSHint]], by
    running =make quality= from the =browser= directory.
*** Unit
    The unit tests in the browser are managed by QUnit and launched using
    [[http://www.nightmarejs.org/][nightmare]], by launching =make unit= from the =browser/test= directory.
    The tests are organised in the directory
    [[../browser/test/QUnit/testFiles][browser/test/QUnit/testFiles]]. The file [[../browser/test/QUnit/testFiles/data_test.js][data_test.js]] contains a toy
    dataset that is used in the tests.

    Unit tests can be launched using a real browser (instead of phantomjs). It
    suffices to open the file [[../browser/test/QUnit/test_Qunit.html][test_Qunit.html]]. In this HTML webpage it is
    possible to see the coverage. It is important that all possible functions
    are covered by unit tests. Having the coverage displayed under Firefox
    needs to display the webpage using a web server for security
    reasons. Under Chromium/Chrome this should work fine by just opening the
    webpage.
*** Functional

**** Architecture
    The browser functional testing is done in the directory
    =browser/tests/functional=, with Watir.
    The functional tests are built using two base files:
    - vidjil_browser.rb :: abstracts the vidjil browser (avoid using IDs or
         class names that could change in the test). The tests must rely as
         much as possible on vidjil_browser. If access to some
         data/input/menus are missing they must be addded there.
    - browser_test.rb :: prepares the environment for the tests. Each test
         file will extend this class (as can be seen in test_multilocus.rb)

    The file =segmenter_test.rb= extends the class in =browser_test.rb= to adapt
    it to the purpose of testing the analyze autonomous app.

    The tests are in the files whose name matches the pattern =test*.rb=. The
    tests are launched by the script in =../launch_functional_tests= which launches
    all the files matching the previous pattern. It also backs up the test
    reports as =ci_reporter= removes them before each file is run.

**** Installation

The following instructions are for Ubuntu.
For OS X, see https://github.com/watir/watirbook/blob/master/manuscript/installation/mac.md.

***** Install rvm

  #+BEGIN_SRC sh
 \curl -sSL https://get.rvm.io | bash
  #+END_SRC

  Afterwards you may need to launch:
  #+BEGIN_SRC sh
  source /etc/profile.d/rvm.sh
  #+END_SRC

***** Install ruby 2.1.1

#+BEGIN_SRC sh
rvm install 2.1.1
#+END_SRC


***** Switch to ruby 2.1.1

#+BEGIN_SRC sh
rvm use 2.1.1
#+END_SRC


***** Install necessary gems

#+BEGIN_SRC sh
gem install minitest
gem install minitest-ci
gem install watir-webdriver
gem install test-unit
#+END_SRC

This may install a =selenium-webdriver= gem whose version is ≥ 3. We highly
recommend that you force an install to a version < 3 (/e.g./ 2.53.4). However
the webdriver may not work with recent versions of Firefox (> 45).

**** Launch browser tests

#+BEGIN_SRC sh
make functional
#+END_SRC

    By default the tests are launched on the Firefox installed on the system.
    This can be modified by providing the =FUNCTIONAL_CLIENT_BROWSER_PATH=
    environment variable (which can contain several pathes, separated with
    spaces) to the =launch_functional_tests= script.  Or, if one wants to launch
    individual test scripts, to set the =WATIR_BROWSER_PATH= environment
    variable.


**** Headless mode

   On servers without a X server the browser tests can be launched in headless
   mode.
   For this sake one needs to install a few more dependencies:

   #+BEGIN_SRC sh
   gem install headless
   #+END_SRC

   The virtual framebuffer X server (=xvfb=) must also be installed. Depending
   on the operating system the command will be different:
   #+BEGIN_SRC sh
   # On Debian/Ubuntu
   apt-get install xvfb
   # On Fedora/CentOS
   yum install xvfb
   #+END_SRC

   Then the browser tests can be launched in headless mode with:
   #+BEGIN_SRC sh
   make headless
   #+END_SRC

   It is possible to view the framebuffer content of =Xvfb= using =vnc=. To do so,
   launch:
   1. =x11vnc -display :99 -localhost=
   2. =vncviewer :0=
**** Interactive mode
     For debugging purposes, it may be useful to launch Watir in interactive
     mode. In that case, you should launch =irb= in the =browser/tests/functional=
     directory.

     Then load the file =browser_test.rb= and create a =BrowserTest=:
     #+BEGIN_SRC ruby
       load 'browser_test.rb'
       bt = BrowserTest.new "toto"

       # Load the Vidjil browser with the given .vidjil file
       bt.set_browser("/doc/analysis-example.vidjil")
     #+END_SRC

     Finally you can directly interact with the =VidjilBrowser= using the =$b=
     variable.

     Another way of debugging interactively is by using (and installing) the
     =ripl= gem. Then you should add, in the =.rb= file to debug:
     #+BEGIN_SRC ruby
     require 'ripl'
     #+END_SRC
     Then if you want to stop launch an =irb= arrived at a given point in the
     code, the following command must be inserted in the code:
     #+BEGIN_SRC ruby
     Ripl.start :binding => binding
     #+END_SRC


* Packaging

** Script driven building
   In order to make packaging Vidjil simple and facilitate releases scripts
   have been made and all meta data files required for the Debian packages
   can be found in the packaging directory in each package's subdirectory.

   In the packaging directory can be found the scripts for building each of
   the vidjil packages: germline, algo (named vidjil) and server.
   Note: build-generic.sh is a helper script that is used by the other
   build-* scripts to build a package.

   Executing one of the scripts will copy the necessary files to the
   corresponding packaging subdirectory (germline, vidjil and server)
   And build the package in the /tmp folder along with all the files needed
   to add the package to a repository

** Packaging Vidjil into a Debian Binary Package
  In this section we will explain how to package a pre-compiled version of
  Vidjil that will allow easy installation although it will not meet all the
  requirements for a full Debian package and therefore cannot be added to the
  default Debian repositories.

  In this document we will not go over the fine details of debian packaging
  and the use of each file. For more information you can refer to this page
  from which this document was inspired:
  http://www.tldp.org/HOWTO/html_single/Debian-Binary-Package-Building-HOWTO/

  Being a binary package it will simply contain the vidjil binary which will
  be copied to the chosen location on installation.

*** Let's Get Started
   You will first and foremost need to compile vidjil. Refer to #TODO for
   more information.

   Create a base directory for the package and the folders to which the binary
   will be installed. Let's call our folder debian and copy the binary to /usr/bin/

   $ mkdir -p debian/usr/bin

   And copy the vidjil binary

   $ cp vidjil debian/usr/bin

   Now create the necessary control file. It should look something like this:

   Package: vidjil
   Version: <version> (ie. 2016.03-1)
   Section: misc
   Priority: optional
   Architecture: all
   Depends: bash (>= 2.05a-11)
   Maintainer: Vidjil Team <team@vidjil.org>
   Description: Count lymphocyte clones
   vidjil parses a fasta or fastq file and produces an output with a list
   of clones and meta-data concerning these clones

   And place it in the correct folder.

   $ mkdir -p debian/DEBIAN
   $ cp control debian/DEBIAN/

   Now build the package and rename it.

   $ dpkg-deb --build debian
   $ mv debian.deb vidjil_<version>_all.deb

   It can be installed but running

   $ sudo dpkg -i vidjil_<version>_all.deb

   # TODO Add Changelog, copyright, etc.


** Packaging Vidjil into a Debian Source Package

  Note: This document is currently incomplete. This process will not produce a
  working debian package. The package build will fail when attempting to
  emulate `make install`

*** Requirements
   - The release version of Vidjil you wish to package
   - Knowledge of Debian packaging
   In this documentation we will not go over all the specifics of creating a
   debian package. You can find the required information here:
   https://wiki.debian.org/HowToPackageForDebian
   and https://wiki.debian.org/Packaging/Intro?action=show&redirect=IntroDebianPackaging

*** Creating the orig archive
    In order to build a debian package, it is required to have a folder named
    debian with several files required for the package which contain meta
    data and permit users to have information on packages and updates for
    packages.

    In order to generate this folder run the following from the source base
    directory.
    $ dh_make -n

    You can remove all files from the debian folder that match the patterns *.ex, *.EX and README*

    Update debian/changelog, debian/control and debian/copyright to contain the correct
    information to reflect the most recent changes and metadata of Vidjil.

    Vidjil has no install rule so we need to use a debian packaging feature.
    Create a file named debian/install with the following line:

    vidjil usr/bin/

    Vidjil currently depends on some unpackaged files that need to be
    downloaded before compiling.
    $ mkdir browser
    $ make germline
    $ make data

    Debian packaging also requires archives of the original source. This is
    to manage people packaging software they haven't developed with changes
    they have made. To make things simpler, we simply package the current
    source as the reference archive and build the package with the script
    that can be obtained here: https://people.debian.org/~wijnen/mkdeb (Thanks
    to Bas Wijnen <wijnen@debian.org> for this script)

    From the source directory, run that script to create the package.

    You're done! You can now install the debian package with:
    $ sudo dpkg -i path/to/package

* Docker
 The vidjil Docker environment is managed by Docker Compose since it is
 composed of several different services this allows us to easily start and
 stop individual services.
 The services are as follows:
   - mysql        The database
   - postfix      The mailing server
   - uwsgi        The Web2py backend server
   - fuse         The XmlRPCServer that handles custom fuses (for comparing
     samples)
   - nginx        The web server
   - workers      The Web2py Scheduler workers in charge of executing vidjil
     users' samples
   - backup       Starts a cron job to schedule regular backups
   - reporter     A monitoring utility that can be configured to send
     monitoring information to a remote server

** Configuring the Vidjil container
   If you are using this environment for use on localhost, everything should
   work out of the box, simply skip ahead to the section about building the
   image and running the services.

   However you may need to further configure the setup in order to make it
   available to a whole network.
   Here is a list of the configuration files found in the vidjil directory:
     conf/conf.js                             contains various variables for the vidjil browser
     conf/defs.py                             contains various variables for the vidjil server
     conf/gzip.conf                           configuration for gzip in nginx
     conf/gzip_static.conf                    same as the previous but for static resources
     conf/uwsgi.ini                           configuration required to run vidjil with uwsgi
     sites/nginx                              configuration required when running vidjil with nginx
     scripts/nginx-entrypoint.sh              entrypoint for the nginx
     service (not currently in use)
     scripts/uwsgi-entrypoint.sh              entrypoint for the uwsgi
     service. Ensures the owner of some relevant volumes are correct within
     the container and starts uwsgi

  Here are some notable configuration changes you should consider:
    - Change the mysql user/password in docker-compose.yml. You will also
      need to change the DB_ADDRESS in conf/defs.py to match it.

    - Change the hostname in the nginx configuration vidjil/sites/nginx_conf.
      If you are using vidjil on a network, then this might be required.

    - Change the default admin password. Login as plop@plop.com password 1234
      and go to the following URL: https://<your
      hostname>/vidjil/default/user/change_password

    - Change the ssl certificates. When building the image vidjil-server
      which creates a self-signed certificate for the sake of convenience to
      ensure the HTTPS queries work from the start, but this may not be
      acceptable for a production environment.
      In order to replace certificates the current method is to mount the
      certificates to /etc/nginx/ssl with docker volumes in
      docker-compose.yml.

    - Change the FROM_EMAIL and ADMIN_EMAILS variables in conf/defs.py. These
      represent the sender email address and the destination email addresses,
      used in reporting patient milestones and server errors.

    - Change the database password. In the mysql directory you will find an
      entrypoint script which creates the database, the user and set that
      user's password.
      This is the password  you need to match in the defs.py file in the
      vidjil configuration.

    - Change the volumes in docker-compose.yml. By default all files that
      require saving outside of the containers (the database, uploads, vidjil
      results and log files) are stored in /opt/vidjil , but  you can change
      this by editing the paths in the volumes.

    - Configure the reporter. Ideally this container should be positioned
      on a remote server in order to be able to report on a down server, but we have packed it here for convenience.

** Building and starting the environment
   Building the image is simple and can be done prior to editing the
   configuration files if you wish, although it is not necessary.
   The docker image is not on the DockerHub and therefore needs to be built
   before it can be used.

   $ docker-compose build

   Running the services:

   $ docker-compose up

   Shorthand for the two previous commands:

   $ docker-compose up --build

* Migrating Data
** Database
   The easiest way to perform a database migration is to first extract the
   data with the following command:

   $ mysqldump -u <user> -p <db> -c --no-create-info > <file>

   An important element to note here is the --no-create-info we add this
   parameter because web2py needs to be allowed to create tables itself
   because it keeps track of database migrations and errors will occur if
   tables exist which it considers it needs to create.

   In order to import the data into an installation you first need to ensure
   the tables have been created by Web2py this can be achieved by simply
   accessing a non-static page.

   /!\ If the database has been initialised from the interface you will
   likely encounter primary key collisions or duplicated data, so it is best
   to skip the initialisation altogether.

   Once the tables have been created, the data can be imported as follows:

   $ mysql -u <user> -p <db> < <file>

   Please note that with this method you should have at least one admin user
   that is accessible in the imported data. Since the initialisation is being
   skipped, you will not have the usual admin account present.
   It is also possible to create a user directly from the database although
   this is not the recommended course of action.

** Files
   Files can simply be copied over to the new installation, their filenames
   are stored in the database and should therefore be accessible as long as
   they are in the correct directories.

** Filtering data
   When extracting data for a given user, the whole database should not be
   copied over.
   There are two courses of action:
     - create a copy of the existing database and remove the users that are
       irrelevant. The cascading delete should remove any unwanted data
       barring a few exceptions (notably fused_file, groups and sample_set_membership)

     - export the relevant data directly from the database. This method
       requires multiple queries which will not be detailed here.

  Once the database has been correctly extracted, a list of files can be
  obtained from sequence_file, fused_file, results_file and analysis_file
  with the following query:

  $ SELECT <filename field>
    FROM <table name>
    INTO OUTFILE 'filepath'
    FIELDS TERMINATED BY ','
    ENCLOSED BY ''
    LINES TERMINATED BY '\n'

  Note: We are managing filenames here which should not contain any
  character such as quotes or commas so we can afford to refrain from
  enclosing the data with quotes.

  This query will output a csv file containing a filename on each line.
  Copying the files is now just a matter of running the following script:

  $ sh copy_files <file source> <file destination> <input file>
