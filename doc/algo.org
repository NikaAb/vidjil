#+TITLE: Vidjil Algorithm -- Command-line Manual
#+AUTHOR: The Vidjil team (Mathieu, Mikaël and Marc)

# Vidjil -- High-throughput Analysis of V(D)J Immune Repertoire -- [[http://www.vidjil.org]]
# Copyright (C) 2011, 2012, 2013, 2014, 2015 by Bonsai bioinformatics 
# at CRIStAL (UMR CNRS 9189, Université Lille) and Inria Lille
# contact@vidjil.org

V(D)J recombinations in lymphocytes are essential for immunological
diversity. They are also useful markers of pathologies, and in
leukemia, are used to quantify the minimal residual disease during
patient follow-up.

Vidjil processes high-throughput sequencing data to extract V(D)J
junctions and gather them into clones. Vidjil starts 
from a set of reads and detects "windows" overlapping the actual CDR3.
This is based on an fast and reliable seed-based heuristic and allows
to output all sequenced clones. The analysis is extremely fast
because, in the first phase, no alignment is performed with database
germline sequences. At the end, only the representative sequences 
of each clone have to be analyzed. Vidjil can also cluster similar
clones, or leave this to the user after a manual review in the browser.

The method is described in the following paper:

Mathieu Giraud, Mikaël Salson, et al.,
"Fast multiclonal clusterization of V(D)J recombinations from high-throughput sequencing",
BMC Genomics 2014, 15:409
http://dx.doi.org/10.1186/1471-2164-15-409

Vidjil is open-source, released under GNU GPLv3 license.

* Supported platforms

Vidjil has been successfully tested on the following platforms :
 - CentOS 6.3 amd64
 - CentOS 6.3 i386
 - Debian Squeeze 
 - Fedora 17
 - FreeBSD 9.1 amd64
 - NetBSD 6.0.1 amd64
 - Ubuntu 12.04 amd64
 - Ubuntu 12.04 i386

Vidjil is developed with continuous integration using systematic unit and functional testing
The results of these automated tests can be checked on [[https://travis-ci.org/vidjil/vidjil][travis-ci.org]].

* Requirements
  
  To install and use Vidjil on a computer, make sure:
  - to be on a POSIX system ;
  - to have a C++ compiler ;
  - to have the =zlib= installed (=zlib1g-dev= package under Debian/Ubuntu,
    =zlib-devel= package under Fedora/CentOS).

* Installation

#+BEGIN_SRC sh
make data
   # get some IGH rearrangements from a single individual, as described in:
   # Boyd, S. D., and al. Individual variation in the germline Ig gene
   # repertoire inferred from variable region gene rearrangements. J
   # Immunol, 184(12), 6986–92.

make germline
   # get IMGT germline databases (IMGT/GENE-DB) -- you have to agree to IMGT license: 
   # academic research only, provided that it is referred to IMGT®,
   # and cited as "IMGT®, the international ImMunoGeneTics information system® 
   # http://www.imgt.org (founder and director: Marie-Paule Lefranc, Montpellier, France). 
   # Lefranc, M.-P., IMGT®, the international ImMunoGeneTics database,
   # Nucl. Acids Res., 29, 207-209 (2001). PMID: 11125093

make                     # compile Vijil
make test                # run self-tests

./vidjil -h              # display help/usage
#+END_SRC


* Input and output files

The main input file of Vidjil is a /set of reads/, given as a =.fasta=
or =.fastq= file, possibly compressed with gzip (=.gz=).
This set of reads can reach several gigabytes. It is
never loaded entirely in the memory, but reads are processed one by
one by the Vidjil algorithm.

The main output of Vidjil (with the default =-c clones= command) are two following files:

 - The =.vidjil= file is /the file for the Vidjil browser/. 
   The file is in a =.json= format (detailed in [[file:format-analysis.org][format-analysis.org]])
   describing the windows and their count, the representatives (=-y=),
   the detailed segmentation (=-z=, see warning below), and possibly
   the results of the further clustering.

   The browser takes this =.vidjil= file (possibly merged with
   =fuse.py=) for the /visualization and analysis/ of clones and their
   tracking along different samples (for example time points in a MRD
   setup or in a immunological study).  
   Please see [[file:browser.org][browser]].org for more information on the browser.

 - The =.vdj.fa= file is /a FASTA file for further processing by other bioinformatics tools/.
   The sequences are at least the windows (and their count in the headers) or
   the representatives (=-y=) when they have been computed.
   The headers include the count of each window, and further includes the 
   detailed segmentation (=-z=, see warning below), given in a '.vdj' format, see below.
   The further clustering is not output in this file.

   The =.vdj.fa= output enable to use Vidjil as a /filtering tool/,
   shrinking a large read set into a manageable number of (pre-)clones
   that will be deeply analyzed and possibly further clustered by
   other software.


The default options are very conservative (large window, no further
automatic clusterization, see below), leaving the user or other
software making detailed analysis and decisions on the final
clustering.

By default, the two output files are named =out/basename.vidjil= in =out/basename.vdj.fa=, where:
 - =out= is the directory where all the outputs are stored, including auxiliary output files (can be changed with the =-o= option)
 - =basename= is the basename of the input =.fasta/.fastq= file (can be overriden with the =-b= option)


* Vidjil parameters

Launching vidjil with =-h= option provides the list of parameters that can be
used. We detail here the options of the main =-c clones= command.

** Germline selection

#+BEGIN_EXAMPLE
Germline databases (one -V/(-D)/-J, or -G, or -g option must be given for all commands except -c germlines)
  -V <file>     V germline multi-fasta file
  -D <file>     D germline multi-fasta file (and resets -m, -M and -w options), will segment into V(D)J components
  -J <file>     J germline multi-fasta file
  -G <prefix>   prefix for V (D) and J repertoires (shortcut for -V <prefix>V.fa -D <prefix>D.fa -J <prefix>J.fa) (basename gives germline code)
  -g <path>     multiple germlines (in the path <path>, takes TRA, TRB, TRG, TRD, IGH, IGK and IGL and sets window prediction parameters)
  -i            multiple germlines, also incomplete rearrangements (must be used with -g)
#+END_EXAMPLE

 - Options such as =-G germline/IGH= or =-G germline/TRG= select one germline system.
 - The =-V/(-D)/-J= options enable to select individual V, (D) and J repertoires (fasta files).
   This allows in particular to select incomplete rearrangement using custom V or J repertoires with added sequences.
 - The =-g germline/= option launches the analysis on the seven germlines, selecting the best locus for each read.
   Using =-g germline/ -i= stests also some incomplete and unusual recombinations.
   See [[http://git.vidjil.org/blob/master/doc/locus.org][locus.org]] for information on the analyzable locus.
   Now the seed and window parameters are hard-coded for each germline. In a future release, the mechanism will be more flexible
   and will parse the =germline/germlines.data= file.

** Main algorithm parameters

#+BEGIN_EXAMPLE
Window prediction
  (use either -s or -k option, but not both)
  -s <string>   spaced seed used for the V/J affectation
                (default: #####-#####, ######-######, #######-#######, depends on germline)
  -k <int>      k-mer size used for the V/J affectation (default: 10, 12, 13, depends on germline)
                (using -k option is equivalent to set with -s a contiguous seed with only '#' characters)
  -m <int>      minimal admissible delta between last V and first J k-mer (default: -10) (default with -D: 0)
  -M <int>      maximal admissible delta between last V and first J k-mer (default: 20) (default with -D: 80)
  -w <int>      w-mer size used for the length of the extracted window (default: 50)
  -e <float>    maximal e-value for determining if a segmentation can be trusted (default: 'all', no limit)
  -t <int>      trim V and J genes (resp. 5' and 3' regions) to keep at most <int> nt (default: 0) (0: no trim)
#+END_EXAMPLE

The =-s=, =-k=, =-m= and =-M= options are the options of the seed-based heuristic. A detailed
explanation can be found in the paper. /These options are for advanced usage, the defaults values should work./
The =-s= or =-k= option selects the seed used for the k-mer V/J affectation.
The =-m= / =-M= options control the minimum and maximum difference of positions between the last
conserved k-mer of V and the first conserved k-mer of J. As they may be some sequencing errors or mutations
compared to the germline genes, this is not the size of the junction (even without inserted nucleotides
in the N region, this difference of position can equal to 20 or 30, or even more, if there are some
errors or mutations at the end of V and and at the beginning of J). Note that is even possible to set =-m -10=
(meaning that V and J could overlap 10 bp). This is the default for TRG recombinations.


The =-w= option fixes the size of the "window" that is the main
identifier to gather clones. The default value (=-w 50=) was selected
to ensure a high-quality clone gathering: reads are clustered when
they /exactly/ share, at the nucleotide level, a 50 bp-window centered
on the CDR3. No sequencing errors are corrected inside this window.
The center of the "window", predicted by the high-throughput heuristic, may
be shifted by a few bases from the actual "center" of the CDR3 (for TRG,
less than 15 bases compared to the IMGT/V-QUEST or IgBlast prediction
in >99% of cases). The extracted window should be large enough to
fully contain the CDR3 as well as some part of the end of the V and
the start of the J, or at least some specific N region, to uniquely identify a clone.

Setting =-w= to higher values (such as =-w 60= or =-w 100=) makes the clone gathering
even more conservative, enabling to split clones with low specificity (such as IGH with very
large D, short or no N regions and almost no somatic hypermutations). However, such settings
may "segment" (analyze) less reads, depending on the read length of your data, and may also
return more clones, as any sequencing error in the window is not corrected.

Setting =-w= to lower values than 50 may "segment" (analyze) a few more reads, depending
on the read length of your data, but may in some cases falsely cluster reads from
different clones. The =-w 40= option is usually safe for VJ recombinations, and =-w 30= can also be tested.
Setting =-w= to lower values is not recommended.

The =-e= option sets the maximal e-value accepted for segmenting a sequence.
It is an upper bound on the number of exepcted windows found by chance by the seed-based heuristic.
The e-value computation takes into account both the number of reads in the
input sequence and the number of locus searched for.
The default value is 1.0, but values such as 1000, 1e-3 or even less can be used
to have a more or less permissive segmentation.
The threshold can be disabled with =-e all=.

The =-t= option sets the maximal number of nucleotides that will be indexed in
V genes (the 3' end) or in J genes (the 5' end). This reduces the load of the
indexes, giving more precise window estimation and e-value computation.
This option is currently not set, it will be set by default in a next release.
Using =-t 100= is generally safe.

** Threshold on clone output

The following options control how many clones are output and analyzed.

#+BEGIN_EXAMPLE
Limits to report a clone (or a window)
  -r <nb>       minimal number of reads supporting a clone (default: 10)
  -% <ratio>    minimal percentage of reads supporting a clone (default: 0)

Limits to further analyze some clones
  -y <nb>       maximal number of clones computed with a representative ('all': no limit) (default: 100)
  -z <nb>       maximal number of clones to be segmented ('all': no limit, do not use) (default: 20)
  -A            reports and segments all clones (-r 1 -% 0 -y all -z all), to be used only on very small datasets
#+END_EXAMPLE

The =-r/-%= options are strong thresholds: if a clone does not have
the requested number of reads, the clone is discarded (except when
using =-l=, see below).
The default =-r 10= option is meant to only output clones that
have a significant read support. *You should use* =-r 1= *if you
want to detect all clones starting from the first read* (especially for
MRD detection).

The =-y= option limits the number of clones for which a representative
sequence is computed. Usually you do not need to have more
representatives (see below), but you can safely put =-y all= if you want
to compute all representative sequences.

The =-z= option limits the number of clones that are fully analyzed,
/with their V(D)J segmentation/, in particular to enable the browser
to display the clones on the grid (otherwise they are displayed on the
'?/?' axis). It should be smaller than =-y=.
If you want to analyze more clones, you should use =-z 50= or
=-z 100=.  It is not recommended to use larger values: outputting more
than 100 clones is often not useful since they can't be visualized easily
in the browser, and takes large computation time (full dynamic programming, 
see below).

Note that even if a clone is not in the top 20 (or 50, or 100) but
still passes the =-r=, =-%= options, it is still reported in both the =.vidjil=
and =.vdj.fa= files. If the clone is at some MRD point in the top 20 (or 50, or 100),
it will be fully analyzed/segmented by this other point (and then
collected by the =fuse.py= script, using representatives computed at this
other point, and then, on the browser, correctly displayed on the grid). 
*Thus is advised to leave the default* =-y 100 -z 20= *options 
for the majority of uses.*

The =-A= option disables all these thresholds. This option should be
used only for test and debug purposes, on very small datasets, and
produce large file and takes huge computation times.


** Labeled windows

Vidjil allows to indicate that specific windows that must be followed
(even if those windows are 'rare', below the =-r/-%= thresholds).

Such windows can be provided either with =-W <window>=, or with =-l <file>=.
The file given by =-l= should have one window by line, as in the following example:

#+BEGIN_EXAMPLE
TGTGCGAGAGATGGACGGGATACGTAAAACGACATATGGTTCGGGGTTTGGTGCTTTTGA my-clone-1
TGTGCGAGAGATGGACGGAATACGTTAAACGACATATGGTTCGGGGTATGGTGCTTTTGA my-clone-2 foo
#+END_EXAMPLE

Windows and labels must be separed by one space.
The first column of the file is the window to be followed
while the remaining columns consist of the window's label.
In Vidjil output, the labels are output alongside their windows.

With the =-F= option, /only/ the labeld windows are kept. This allows
to quickly filter a set of reads, looking for a known window,
with the =-FaW <window>= options:
All the reads with this windows will be extracted to =out/seq/clone.fa-1=.

** Further clustering (experimental)

These options have no consequences on the =.vdj.fa= file, but adds
additional information in the =.vidjil= file to be visualized in the
browser.

Setting the =-n= option triggers an additional automatic
clustering using DBSCAN algorithm (Ester and al., 1996). 

The =-E= option allows to specify a file for manually clustering two windows
considered as similar. Such a file may be automatically produced by vidjil
(out/edges), depending on the option provided. Only the two first columns 
(separed by one space) are important to vidjil, they only consist of the 
two windows that must be clustered.




* Examples of use

All the following examples are on a IGH VDJ recombinations : they thus
require either the =-G germline/IGH= option, or the multi-germline =-g germline= option.

#+BEGIN_SRC sh
./vidjil -G germline/IGH data/Stanford_S22.fasta
   # Detects windows overlapping IGH CDR3s and gather the reads into clones
   # Summary of clones is available both in out/Stanford_S22.vdj.fa
   # and in out/Stanford_S22.vidjil.
#+END_SRC

#+BEGIN_EXAMPLE
>8--window--1 
CACCTATTACTGTACCCGGGAGGAACAATATAGCAGCTGGTACTTTGACTTCTGGGGCCA
>5--window--2 
CTATGATAGTAGTGGTTATTACGGGGTAGGGCAGTACTACTACTACTACATGGACGTCTG
(...)
#+END_EXAMPLE

   Windows of size 60 (modifiable by =-w=) have been extracted.
   The first window has 8 occurrences, the second window has 5 occurrences.


#+BEGIN_SRC sh
./vidjil -g germline -i data/reads.fasta
   # Detects for each read the best locus
   # Detects windows overlapping CDR3s and gather the reads into clones
#+END_SRC


#+BEGIN_SRC sh
./vidjil -c clones -G germline/IGH -r 1 ./data/clones_simul.fa
   # Extracts the windows (-r 1, with at least 1 read each), 
   # then gather them into clones 
   # A more natural option could be -r 5.
   # For debug purpose, if one wants all the clones, use the option -A.
   # Results are both
   #  - on the standard output
   #  - in out/clones_simul.vdj.fa (fasta file to be processed by other tools)
   #  - in out/clones_simul.vidjil (for the browser)
   # Additional files are in out/clones_simul.windows.fa and out/seq/clone.fa-*
   # If one adds the '-U' option, an additonal out/clones_simul.segmented.vdj.fa file is produced,
   # listing segmented reads using the .vdj format (see below)
#+END_SRC

#+BEGIN_SRC sh
./vidjil -c clones -G germline/IGH -r 1 -n 5 ./data/clones_simul.fa
   # Window extraction + clone gathering,
   # with automatic clustering, distance five (-n 5)
#+END_SRC

#+BEGIN_SRC sh
./vidjil -c segment -G germline/IGH data/segment_S22.fa
   # Segment the reads onto VDJ germline 
   # (this is slow and should only be used for testing)
#+END_SRC

#+BEGIN_SRC sh
./vidjil -c germlines file.fastq
   # Output statistics on the number of occurrences of k-mers of the different germlines
#+END_SRC

* Segmentation and .vdj format

Vidjil output includes segmentation of V(D)J recombinations. This happens
in the following situations:

- in a first pass, when requested with =-U= option, in a =.segmented.vdj.fa= file.

      The goal of this ultra-fast segmentation, based on a seed
      heuristics, is only to locate the w-window overlapping the
      CDR3. This should not be taken as a real V(D)J segmentation, as
      the center of the window may be shifted up to 15 bases from the
      actual center.

- in a second pass, on the standard output and in both =.vidjil= and =.vdj.fa= files
        - at the end of the clones detection (default command =-c clones=)
        - or directly when explicitly requiring segmentation (=-c segment=)

      This segmentation obtained by full comparison (dynamic
      programming) with all germline sequences. Such segmentation are
      not at the core of the Vidjil clone gathering method (which
      relies only on the 'window', see above). They are slow to compute
      and are provided only for convenience.
      They should be checked with other softwares such
      as IgBlast, iHHMune-align or IMGT/V-QUEST.

Segmentations of V(D)J recombinations are displayed using a dedicated
.vdj format. This format is compatible with FASTA format. A line starting
with a > is of the following form:

#+BEGIN_EXAMPLE
>name + VDJ  startV endV   startD endD   startJ  endJ   Vgene   delV/N1/delD5'   Dgene   delD3'/N2/delJ   Jgene   comments

        name          sequence name (include the number of occurrences in the read set and possibly other information)
        +             strand on which the sequence is mapped
        VDJ           type of segmentation (can be "VJ", "VDJ", 
    	              or shorter tags such as "V" for incomplete sequences).	
		      The following line are for "VDJ" recombinations :

        startV endV   start and end position of the V gene in the sequence (start at 0)
        startD endD                      ... of the D gene ...
        startJ endJ                      ... of the J gene ...

        Vgene         name of the V gene 

        delV          number of deletions at the end (3') of the V
        N1            nucleotide sequence inserted between the V and the D
        delD5'        number of deletions at the start (5') of the D

        Dgene         name of the D gene being rearranged

        delD3'        number of deletions at the end (3') of the D
        N2            nucleotide sequence inserted between the D and the J
        delJ          number of deletions at the start (5') of the J

        Jgene         name of the J gene being rearranged
        
        comments      optional comments. In Vidjil, the following comments are now used:
                      - "seed" when this comes for the first pass (.segmented.vdj.fa). See the warning above.
                      - "!ov x" when there is an overlap of x bases between last V seed and first J seed
                      - the name of the locus (TRA, TRB, TRG, TRD, IGH, IGL, IGK, possibly followed
                        by a + for incomplete/unusual recombinations)

#+END_EXAMPLE

Following such a line, the nucleotide sequence may be given, giving in
this case a valid FASTA file.

For VJ recombinations the output is similar, the fields that are not
applicable being removed:

#+BEGIN_EXAMPLE
>name + VJ  startV endV   startJ endJ   Vgene   delV/N1/delJ   Jgene  comments
#+END_EXAMPLE
